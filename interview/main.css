body {
/*background-color: #C29D9E;*/
background-image: url(bg.png);
background-size: contain;
}

fieldset {
  border: 0;
  margin: 2rem 0;
}

fieldset legend {
  font-weight: 700;
}

.context {
 text-align: center;
}

.answer__item {
    background-color: #D8C9CA;
    display: block; 
    position: relative;
    cursor: pointer;
    padding: 0.75rem 1.25rem;
    margin: 0.25rem 0;
    border-radius: 10px;
    font-family: 'Noto Sans', sans-serif;
 }

 .answers {
  margin-left: auto;
  margin-right: auto;
  width: 50rem;
  font-family: 'Noto Sans', sans-serif;
 }

 .answer{
  opacity: 100%;
 }
 
 .intro {
  width: 50rem;
  margin-right: auto;
  margin-left:auto;
  background-color:#D8C9CA;
  border-radius: 10px;
 }
h1{
  text-align: center;
}

 p{
  font-family: 'Noto Sans', sans-serif;
  text-align: center;
  font-size: 14pt;
  padding:  0.75rem 1.25rem;
 }

 legend{ 
  text-align: center;
  color: #7A264F;
  font-family: 'Libre Baskerville', serif;
  padding: 1em;
  font-size: 14pt;
  width: 50rem;
  }

/* Hide Radio Buttons and Submit Button */
input[type="radio"], button {
  display: none;
}

/* Any correct answer on any answered question, highlight in light green */
:valid .answer__item--is-correct { background-color: rgba(61, 181, 64, 0.6) }

/* Show any extra explanatory text */
.answer__reveal-text { display: none; }
:valid .answer__reveal-text { display: block }

/* Any chosen answer, highlight in red */
:checked + .answer__item { color: #ffffff; background-color: #950013 }

/* Any correctly chosen answer, highlight in bright green */
:checked + .answer__item--is-correct { background-color: #3db540; }

/* Show the icon for the selected answer */
:checked + .answer__item .answer__icon { display: inline-block }


/* prevent chosing another answer once chosen */
:valid { -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none }
:valid + .answer__item { pointer-events: none }

/* keep track of score */
form { counter-reset: quiz-score }
:checked + .answer__item--is-correct { counter-increment: quiz-score }
.score:after { content: counter(quiz-score) "/" attr(data-question-count) }

/* show score once quiz has been completed */
.message { display: none; }
form:valid .message { display: block }